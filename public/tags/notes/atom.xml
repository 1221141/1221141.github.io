<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title> - notes</title>
    <link rel="self" type="application/atom+xml" href="https://1221141.github.io/tags/notes/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://1221141.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-08-13T20:43:40+00:00</updated>
    <id>https://1221141.github.io/tags/notes/atom.xml</id>
    <entry xml:lang="en">
        <title>Ideas to stop using youtube</title>
        <published>2024-08-13T20:43:40+00:00</published>
        <updated>2024-08-13T20:43:40+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://1221141.github.io/blog/20240813204340-ideas-to-stop-using-youtube/"/>
        <id>https://1221141.github.io/blog/20240813204340-ideas-to-stop-using-youtube/</id>
        
        <content type="html" xml:base="https://1221141.github.io/blog/20240813204340-ideas-to-stop-using-youtube/">&lt;p&gt;I want to try to limit using YouTube. An idea that I have was: Instead of watch YouTube try to read comics&#x2F;manga and play video games. If I want to learn something and look YouTube for it a tutorial than is fine. But to spend time watching useless videos and doom scrolling is annoying. Instead I can spend time reading and playing videos game. Although they are not productive I&#x27;m trying to not think about productivity all the time.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>I get bored when I&#x27;m alone</title>
        <published>2024-07-24T19:18:03+00:00</published>
        <updated>2024-07-24T19:18:03+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://1221141.github.io/blog/20240724191803-i-get-bored-when-im-alone/"/>
        <id>https://1221141.github.io/blog/20240724191803-i-get-bored-when-im-alone/</id>
        
        <content type="html" xml:base="https://1221141.github.io/blog/20240724191803-i-get-bored-when-im-alone/">&lt;p&gt;Before I was used to be alone all the time. So I would spend time watching youtube&#x2F;twitch or coding something. But now I hate being alone. I get bored quickly.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>dabun-doumei</title>
        <published>2024-07-17T19:57:35+00:00</published>
        <updated>2024-07-17T19:57:35+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://1221141.github.io/blog/20240717195735-tuo-wen-tong-meng-com-quan-chuang-zuo-xi-ge-ren-saitojian-suo-enzin/"/>
        <id>https://1221141.github.io/blog/20240717195735-tuo-wen-tong-meng-com-quan-chuang-zuo-xi-ge-ren-saitojian-suo-enzin/</id>
        
        <content type="html" xml:base="https://1221141.github.io/blog/20240717195735-tuo-wen-tong-meng-com-quan-chuang-zuo-xi-ge-ren-saitojian-suo-enzin/">&lt;p&gt;駄文同盟.com 【全創作系個人サイト検索エンジン！】&lt;br &#x2F;&gt;
&lt;img src=&quot;&#x2F;uploads&#x2F;2024&#x2F;07&#x2F;Screenshot_20240721_161719.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;br &#x2F;&gt;
 &lt;br &#x2F;&gt;
oldschool website&lt;br &#x2F;&gt;
&lt;a href=&quot;http:&#x2F;&#x2F;dabun-doumei.com&#x2F;&quot;&gt;http:&#x2F;&#x2F;dabun-doumei.com&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Thermos Mug for coffee</title>
        <published>2024-04-17T10:21:08+00:00</published>
        <updated>2024-04-17T10:21:08+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://1221141.github.io/blog/20240417102108-thermos-mug-for-coffee/"/>
        <id>https://1221141.github.io/blog/20240417102108-thermos-mug-for-coffee/</id>
        
        <content type="html" xml:base="https://1221141.github.io/blog/20240417102108-thermos-mug-for-coffee/">&lt;p&gt;A while ago I bought this Thermos to drink coffee while working. First time that I used was yesterday at the office.&lt;&#x2F;p&gt;
&lt;p&gt;\&lt;&#x2F;p&gt;
&lt;p&gt;Fantastic! The coffee stayed warm the whole day. Might buy a second one and leave at the office so I don&#x27;t have to carry home. I used home today and was a good experience as well.&lt;&#x2F;p&gt;
&lt;p&gt;\&lt;&#x2F;p&gt;
&lt;p&gt;Mostly I drink coffee while in meetings or when thinking. So it was annoying when the coffee was cold and I had to get up to get new ones. In the office a lot of interruptions happen as well, preventing to drink the home while hot.&lt;&#x2F;p&gt;
&lt;p&gt;\&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;uploads&#x2F;2024&#x2F;04&#x2F;wp-17133454555031505581541700845429-225x300.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Ikea ENVÄLDIG&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Finance with Hledger and Ledger</title>
        <published>2024-02-19T12:20:27+00:00</published>
        <updated>2024-02-19T12:20:27+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://1221141.github.io/blog/20240219122027-finance-with-hledger-and-ledger/"/>
        <id>https://1221141.github.io/blog/20240219122027-finance-with-hledger-and-ledger/</id>
        
        <content type="html" xml:base="https://1221141.github.io/blog/20240219122027-finance-with-hledger-and-ledger/">&lt;p&gt;Ledger is a tool to track the personal finances using a technique called double entry bookkeeping. &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Double-entry_bookkeeping&quot;&gt;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Double-entry_bookkeeping&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
The idea is to use a plain text to write down the expenses and assets, and use a cli tool like ledger of hledger to generated different types of reports.&lt;br &#x2F;&gt;
I tried it before but found extremely tedious to input the expenses, and my partner wants to use a spreadsheet to keep things simpler.&lt;br &#x2F;&gt;
I found that there is a tool to easily enter transactions via the cli. It is called &lt;strong&gt;hledger-iadd.&lt;&#x2F;strong&gt; &amp;lt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hpdeifel&#x2F;hledger-iadd&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;hpdeifel&#x2F;hledger-iadd&lt;&#x2F;a&gt;&amp;gt;&lt;br &#x2F;&gt;
Unfortunetely I could only find installation and builds of the binary for Arch linux. I installed in my EndeavourOS Installation.&lt;br &#x2F;&gt;
I enter the transactions with it, and then later I do some alterations in python to generate the report to paste on the spreadsheet.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#!&#x2F;usr&#x2F;bin&#x2F;python3
&lt;&#x2F;span&gt;&lt;span&gt;import csv
&lt;&#x2F;span&gt;&lt;span&gt;import sys
&lt;&#x2F;span&gt;&lt;span&gt;from datetime import datetime
&lt;&#x2F;span&gt;&lt;span&gt;# Define the expense mapping dictionary
&lt;&#x2F;span&gt;&lt;span&gt;expense_mapping = {
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;expenses:bank fee&amp;#39;: &amp;#39;Bank fee&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;expenses:clothing&amp;#39;: &amp;#39;Clothing&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;expenses:food&#x2F;dining out&amp;#39;: &amp;#39;Food&#x2F;Dining Out&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;expenses:groceries&amp;#39;: &amp;#39;Groceries&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;expenses:health&amp;#39;: &amp;#39;Health&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;expenses:pharmacy&amp;#39;: &amp;#39;Pharmachy&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;expenses:house&amp;#39;: &amp;#39;House&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;expenses:insurance&amp;#39;: &amp;#39;Insurance&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;expenses:internet&amp;#39;: &amp;#39;Internet&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;expenses:shopping&amp;#39;: &amp;#39;Shopping&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;expenses:transportation&amp;#39;: &amp;#39;Transportation&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;expenses:trips&amp;#39;: &amp;#39;Trips&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;expenses:union&amp;#39;: &amp;#39;Union&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;def map_expenses(reader):
&lt;&#x2F;span&gt;&lt;span&gt;# Read the CSV input and apply the mapping
&lt;&#x2F;span&gt;&lt;span&gt;for row in reader:
&lt;&#x2F;span&gt;&lt;span&gt;category = row[2]  # Assuming the category is in the third column
&lt;&#x2F;span&gt;&lt;span&gt;mapped_category = expense_mapping.get(category, &amp;#39;Other&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;date_obj = datetime.strptime(row[0], &amp;#39;%Y&#x2F;%m&#x2F;%d&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;formatted_date = date_obj.strftime(&amp;#39;%m&#x2F;%d&#x2F;%Y&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;amount = row[3].split()[0]  # Assuming the amount is in the fourth column
&lt;&#x2F;span&gt;&lt;span&gt;print(&amp;#39;,&amp;#39;.join([formatted_date, row[1], mapped_category, amount]))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;if __name__ == &amp;quot;__main__&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;# Read from stdin as CSV
&lt;&#x2F;span&gt;&lt;span&gt;reader = csv.reader(sys.stdin)
&lt;&#x2F;span&gt;&lt;span&gt;map_expenses(reader)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Here is the script I use to generate the report. e.g.: 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.&#x2F;export.sh jan
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ cat export.sh 
&lt;&#x2F;span&gt;&lt;span&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;if [ -z &amp;quot;$1&amp;quot; ]; then
&lt;&#x2F;span&gt;&lt;span&gt;    echo &amp;quot;Period is not set. Aborting.&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    exit 1
&lt;&#x2F;span&gt;&lt;span&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;PERIOD=$1
&lt;&#x2F;span&gt;&lt;span&gt;ledger -f 2024.journal --period $PERIOD register --depth=2 --format=&amp;#39;%(date),1221141,%(account),%(amount(number))\n&amp;#39; expenses | .&#x2F;tocsv.py
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt; &lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>GPS Tracking with gpslogger and trackserver</title>
        <published>2024-01-19T23:45:02+00:00</published>
        <updated>2024-01-19T23:45:02+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://1221141.github.io/blog/20240119234502-gps-tracking-with-gpslogger-and-trackserver/"/>
        <id>https://1221141.github.io/blog/20240119234502-gps-tracking-with-gpslogger-and-trackserver/</id>
        
        <content type="html" xml:base="https://1221141.github.io/blog/20240119234502-gps-tracking-with-gpslogger-and-trackserver/">&lt;p&gt;Android app: &lt;a href=&quot;https:&#x2F;&#x2F;gpslogger.app&#x2F;&quot;&gt;https:&#x2F;&#x2F;gpslogger.app&#x2F;&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
Wordpress plugin: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tinuzz&#x2F;wp-plugin-trackserver&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;tinuzz&#x2F;wp-plugin-trackserver&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
 &lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Parse WordPress to Markdown</title>
        <published>2024-01-19T09:58:44+00:00</published>
        <updated>2024-01-19T09:58:44+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://1221141.github.io/blog/20240119095844-parse-wordpress-to-markdown/"/>
        <id>https://1221141.github.io/blog/20240119095844-parse-wordpress-to-markdown/</id>
        
        <content type="html" xml:base="https://1221141.github.io/blog/20240119095844-parse-wordpress-to-markdown/">&lt;p&gt;I already expressed my attempts to use wordpress but save a backup of the website in markdown (at least the posts) here &lt;a href=&quot;&#x2F;&quot;&gt;Managed&#x2F; to make a markdown backup from wordpress&lt;&#x2F;a&gt;, and here &lt;a href=&quot;&#x2F;&quot;&gt;Ensure&#x2F; Markdown is the true format of my posts&lt;&#x2F;a&gt;.&lt;br &#x2F;&gt;
I believe I found the best way to achieve that. The backup is done in two stages.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;first-step&quot;&gt;First step&lt;&#x2F;h2&gt;
&lt;p&gt;Create a backup in json. For this I wrote a python script that reads from the database and saves the dates, slugs, tags and content in a json. The content still in html.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;import mysql.connector
&lt;&#x2F;span&gt;&lt;span&gt;import json
&lt;&#x2F;span&gt;&lt;span&gt;import re
&lt;&#x2F;span&gt;&lt;span&gt;import os
&lt;&#x2F;span&gt;&lt;span&gt;import shutil
&lt;&#x2F;span&gt;&lt;span&gt;from urllib.parse import unquote
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Replace these with your WordPress MySQL database credentials
&lt;&#x2F;span&gt;&lt;span&gt;db_config = {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;host&amp;#39;: &amp;#39;localhost&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;user&amp;#39;: &amp;#39;wordpress&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;password&amp;#39;: &amp;#39;password&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;database&amp;#39;: &amp;#39;wordpress&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Specify the base folder for saving posts and images
&lt;&#x2F;span&gt;&lt;span&gt;base_folder = &amp;quot;posts&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Create the base folder if it doesn&amp;#39;t exist
&lt;&#x2F;span&gt;&lt;span&gt;if not os.path.exists(base_folder):
&lt;&#x2F;span&gt;&lt;span&gt;    os.makedirs(base_folder)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;attachment_paths = []
&lt;&#x2F;span&gt;&lt;span&gt;def update_links(match):
&lt;&#x2F;span&gt;&lt;span&gt;    link = match.group(0)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    # Check if the link is an attachment
&lt;&#x2F;span&gt;&lt;span&gt;    if &amp;#39;wp-content&#x2F;uploads&amp;#39; in link:
&lt;&#x2F;span&gt;&lt;span&gt;        # Extract the path after &#x2F;uploads
&lt;&#x2F;span&gt;&lt;span&gt;        path_after_uploads = link.split(&amp;#39;&#x2F;uploads&amp;#39;, 1)[-1]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        # Remove IP from the link and update to reference a folder
&lt;&#x2F;span&gt;&lt;span&gt;        updated_link = f&amp;#39;&#x2F;uploads{path_after_uploads}&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        # Save the path of the attachment file to the list
&lt;&#x2F;span&gt;&lt;span&gt;        attachment_paths.append(updated_link)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        return updated_link
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    # Check if the link is to another post
&lt;&#x2F;span&gt;&lt;span&gt;    elif &amp;#39;192.168.1.217&amp;#39; in link:
&lt;&#x2F;span&gt;&lt;span&gt;        # Extract the post slug from the link
&lt;&#x2F;span&gt;&lt;span&gt;        slug = link.split(&amp;#39;&#x2F;&amp;#39;)[-1]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        # Replace the link with the post slug
&lt;&#x2F;span&gt;&lt;span&gt;        updated_link = f&amp;#39;&#x2F;{slug}&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;        return updated_link
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    # If it&amp;#39;s a different type of link, leave it unchanged
&lt;&#x2F;span&gt;&lt;span&gt;    return link
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Establish a connection to the WordPress MySQL database
&lt;&#x2F;span&gt;&lt;span&gt;try:
&lt;&#x2F;span&gt;&lt;span&gt;    connection = mysql.connector.connect(**db_config)
&lt;&#x2F;span&gt;&lt;span&gt;    cursor = connection.cursor()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    # Query to fetch post titles
&lt;&#x2F;span&gt;&lt;span&gt;    query = &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    SELECT
&lt;&#x2F;span&gt;&lt;span&gt;        post_date AS creation_date,
&lt;&#x2F;span&gt;&lt;span&gt;        post_modified AS update_date,
&lt;&#x2F;span&gt;&lt;span&gt;        post_title AS title,
&lt;&#x2F;span&gt;&lt;span&gt;        post_name AS slug,
&lt;&#x2F;span&gt;&lt;span&gt;        post_content AS content,
&lt;&#x2F;span&gt;&lt;span&gt;        GROUP_CONCAT(DISTINCT terms.name) AS tags,
&lt;&#x2F;span&gt;&lt;span&gt;        post_status AS status
&lt;&#x2F;span&gt;&lt;span&gt;    FROM
&lt;&#x2F;span&gt;&lt;span&gt;        wp_posts
&lt;&#x2F;span&gt;&lt;span&gt;    LEFT JOIN
&lt;&#x2F;span&gt;&lt;span&gt;        wp_term_relationships ON wp_posts.ID = wp_term_relationships.object_id
&lt;&#x2F;span&gt;&lt;span&gt;    LEFT JOIN
&lt;&#x2F;span&gt;&lt;span&gt;        wp_term_taxonomy ON wp_term_relationships.term_taxonomy_id = wp_term_taxonomy.term_taxonomy_id
&lt;&#x2F;span&gt;&lt;span&gt;    LEFT JOIN
&lt;&#x2F;span&gt;&lt;span&gt;        wp_terms AS terms ON wp_term_taxonomy.term_id = terms.term_id
&lt;&#x2F;span&gt;&lt;span&gt;    WHERE
&lt;&#x2F;span&gt;&lt;span&gt;        post_type = &amp;#39;post&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;        AND post_status = &amp;#39;publish&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    GROUP BY
&lt;&#x2F;span&gt;&lt;span&gt;        wp_posts.ID
&lt;&#x2F;span&gt;&lt;span&gt;    ORDER BY
&lt;&#x2F;span&gt;&lt;span&gt;        post_date DESC;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    # Execute the query
&lt;&#x2F;span&gt;&lt;span&gt;    cursor.execute(query)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    # Fetch all rows
&lt;&#x2F;span&gt;&lt;span&gt;    posts = cursor.fetchall()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    # Print the titles of all posts
&lt;&#x2F;span&gt;&lt;span&gt;    for post in posts:
&lt;&#x2F;span&gt;&lt;span&gt;        creation_date = post[0]
&lt;&#x2F;span&gt;&lt;span&gt;        content = post[4]
&lt;&#x2F;span&gt;&lt;span&gt;        slug = unquote(post[3])
&lt;&#x2F;span&gt;&lt;span&gt;        # Generate filename based on creation date and slug
&lt;&#x2F;span&gt;&lt;span&gt;        filename = f&amp;quot;{creation_date.strftime(&amp;#39;%Y%m%d%H%M%S&amp;#39;)}_{slug}.json&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        # Update links in the content
&lt;&#x2F;span&gt;&lt;span&gt;        updated_content = re.sub(r&amp;#39;https?:&#x2F;&#x2F;192\.168\.1\.217\S+&amp;#39;, update_links, content)
&lt;&#x2F;span&gt;&lt;span&gt;     # Create a dictionary with post details
&lt;&#x2F;span&gt;&lt;span&gt;        post_data = {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;creation_date&amp;quot;: creation_date.strftime(&amp;#39;%Y-%m-%d %H:%M:%S&amp;#39;),
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;update_date&amp;quot;: post[1].strftime(&amp;#39;%Y-%m-%d %H:%M:%S&amp;#39;),
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;title&amp;quot;: post[2],
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;slug&amp;quot;: slug,  
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;content&amp;quot;: updated_content.splitlines(),
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;tags&amp;quot;: post[5].split(&amp;#39;,&amp;#39;),
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;status&amp;quot;: post[6]
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        # Generate filename based on creation date and slug
&lt;&#x2F;span&gt;&lt;span&gt;        filename = os.path.join(base_folder, f&amp;quot;{creation_date.strftime(&amp;#39;%Y%m%d%H%M%S&amp;#39;)}_{slug}.json&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        # Save post data to a JSON file in the &amp;quot;posts&amp;quot; folder
&lt;&#x2F;span&gt;&lt;span&gt;        with open(filename, &amp;#39;w&amp;#39;) as json_file:
&lt;&#x2F;span&gt;&lt;span&gt;            json.dump(post_data, json_file, ensure_ascii=False, indent=4)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        print(f&amp;quot;Saved {filename}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    print(&amp;quot;\nAttachment Paths:&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    for path in attachment_paths:
&lt;&#x2F;span&gt;&lt;span&gt;        print(path)
&lt;&#x2F;span&gt;&lt;span&gt;    uploads_folder = os.path.join(base_folder, &amp;quot;uploads&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    shutil.copytree(&amp;#39;&#x2F;var&#x2F;www&#x2F;wordpress&#x2F;wp-content&#x2F;uploads&amp;#39;,uploads_folder, dirs_exist_ok=True)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;except mysql.connector.Error as err:
&lt;&#x2F;span&gt;&lt;span&gt;    print(f&amp;quot;Error: {err}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;finally:
&lt;&#x2F;span&gt;&lt;span&gt;    # Close the cursor and connection
&lt;&#x2F;span&gt;&lt;span&gt;    if &amp;#39;cursor&amp;#39; in locals() and cursor is not None:
&lt;&#x2F;span&gt;&lt;span&gt;        cursor.close()
&lt;&#x2F;span&gt;&lt;span&gt;    if &amp;#39;connection&amp;#39; in locals() and connection.is_connected():
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;second-step&quot;&gt;Second step&lt;&#x2F;h2&gt;
&lt;p&gt;Using javascript&#x2F;typescript and deno, run a script taht reads the jsons and converts to markdown. This is easily done using &lt;a href=&quot;https:&#x2F;&#x2F;unifiedjs.com&#x2F;&quot;&gt;unifiedjs&lt;&#x2F;a&gt; project.&lt;br &#x2F;&gt;
The script even adds a &lt;code&gt;.&lt;&#x2F;code&gt; for the internal links, making sure that they are rendered ok in github.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;import rehypeParse from &amp;quot;npm:rehype-parse&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;import rehypeRemark from &amp;quot;npm:rehype-remark&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;import remarkStringify from &amp;quot;npm:remark-stringify&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;import remarkGfm from &amp;quot;npm:remark-gfm&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;import removeComments from &amp;quot;npm:remark-remove-comments&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;import rehypeStringify from &amp;quot;npm:rehype-stringify&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;import * as path from &amp;quot;https:&#x2F;&#x2F;deno.land&#x2F;std@0.97.0&#x2F;path&#x2F;mod.ts&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;import { copy, ensureDir } from &amp;quot;https:&#x2F;&#x2F;deno.land&#x2F;std@0.97.0&#x2F;fs&#x2F;mod.ts&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;import { unified } from &amp;quot;npm:unified&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;try {
&lt;&#x2F;span&gt;&lt;span&gt;  let dirName = &amp;quot;.&#x2F;posts&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  let mdDirName = &amp;quot;.&#x2F;md&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  const dirEntries = await Deno.readDir(dirName);
&lt;&#x2F;span&gt;&lt;span&gt;  const uploadsSet = new Set&amp;lt;string&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  for await (const entry of dirEntries) {
&lt;&#x2F;span&gt;&lt;span&gt;    if (entry.isFile) {
&lt;&#x2F;span&gt;&lt;span&gt;      const filePath = `${dirName}&#x2F;${entry.name}`;
&lt;&#x2F;span&gt;&lt;span&gt;      const fileContent = await Deno.readTextFile(filePath);
&lt;&#x2F;span&gt;&lt;span&gt;      const fileJson = await JSON.parse(fileContent);
&lt;&#x2F;span&gt;&lt;span&gt;      const mdFile = await parseToMd(fileJson, uploadsSet);
&lt;&#x2F;span&gt;&lt;span&gt;      const mdFilePath = `${mdDirName}&#x2F;${path.parse(entry.name).name + &amp;quot;.md&amp;quot;}`;
&lt;&#x2F;span&gt;&lt;span&gt;      await Deno.writeTextFile(mdFilePath, mdFile);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &#x2F;&#x2F; Print the set of links after the main loop
&lt;&#x2F;span&gt;&lt;span&gt;  await Promise.all(Array.from(uploadsSet).map(async (filePath) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    const sourcePath = `.&#x2F;posts${filePath}`;
&lt;&#x2F;span&gt;&lt;span&gt;    const destinationPath = `.&#x2F;md${filePath}`;
&lt;&#x2F;span&gt;&lt;span&gt;    await ensureDir(path.dirname(destinationPath));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    await copy(sourcePath, destinationPath, { overwrite: true });
&lt;&#x2F;span&gt;&lt;span&gt;  }));
&lt;&#x2F;span&gt;&lt;span&gt;console.log(&amp;#39;md done&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;} catch (error) {
&lt;&#x2F;span&gt;&lt;span&gt;  console.log(error);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async function parseToMd(jsonFile, uploadsSet) {
&lt;&#x2F;span&gt;&lt;span&gt;  let md = &amp;quot;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  let frontmatter = `---
&lt;&#x2F;span&gt;&lt;span&gt;title: &amp;quot;${jsonFile.title}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;created: &amp;quot;${jsonFile.creation_date}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;lastmod: &amp;quot;${jsonFile.update_date}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;slug: &amp;quot;${jsonFile.slug}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;draft: ${jsonFile.status === &amp;quot;published&amp;quot; ? false : true}
&lt;&#x2F;span&gt;&lt;span&gt;tags:
&lt;&#x2F;span&gt;&lt;span&gt;`;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  for (const tag of jsonFile.tags) {
&lt;&#x2F;span&gt;&lt;span&gt;    frontmatter += `  - ${tag}\n`;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  frontmatter += `---\n`;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  let cnt = jsonFile.content.map((line) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    if (line === &amp;quot;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;      line = &amp;quot;\n&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    return line;
&lt;&#x2F;span&gt;&lt;span&gt;  }).join(&amp;quot;\n\n&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  const body = await unified()
&lt;&#x2F;span&gt;&lt;span&gt;    .use(rehypeParse, { fragment: true })
&lt;&#x2F;span&gt;&lt;span&gt;    .use(() =&amp;gt; prependDotToImagePath(uploadsSet))
&lt;&#x2F;span&gt;&lt;span&gt;    .use(rehypeRemark)
&lt;&#x2F;span&gt;&lt;span&gt;    .use(remarkGfm)
&lt;&#x2F;span&gt;&lt;span&gt;    .use(removeComments)
&lt;&#x2F;span&gt;&lt;span&gt;    .use(remarkStringify)
&lt;&#x2F;span&gt;&lt;span&gt;    .process(cnt);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  const mdContent = String(body);
&lt;&#x2F;span&gt;&lt;span&gt;  return frontmatter + &amp;quot;\n&amp;quot; + mdContent;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;function prependDotToImagePath(uploadsSet) {
&lt;&#x2F;span&gt;&lt;span&gt;  const visit = (node) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    if (node.type === &amp;quot;element&amp;quot; &amp;amp;&amp;amp; node.properties) {
&lt;&#x2F;span&gt;&lt;span&gt;      &#x2F;&#x2F; Handle img tags
&lt;&#x2F;span&gt;&lt;span&gt;      if (
&lt;&#x2F;span&gt;&lt;span&gt;        node.tagName === &amp;quot;img&amp;quot; &amp;amp;&amp;amp; node.properties.src &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;        node.properties.src.startsWith(&amp;quot;&#x2F;uploads&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;      ) {
&lt;&#x2F;span&gt;&lt;span&gt;        uploadsSet.add(node.properties.src);
&lt;&#x2F;span&gt;&lt;span&gt;        node.properties.src = `.${node.properties.src}`;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &#x2F;&#x2F; Handle a tags
&lt;&#x2F;span&gt;&lt;span&gt;      if (
&lt;&#x2F;span&gt;&lt;span&gt;        node.tagName === &amp;quot;a&amp;quot; &amp;amp;&amp;amp; node.properties.href &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;        node.properties.href.startsWith(&amp;quot;&#x2F;uploads&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;      ) {
&lt;&#x2F;span&gt;&lt;span&gt;        uploadsSet.add(node.properties.href);
&lt;&#x2F;span&gt;&lt;span&gt;        node.properties.href = `.${node.properties.href}`;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    if (node.children) {
&lt;&#x2F;span&gt;&lt;span&gt;      node.children.forEach(visit);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  return (tree) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    tree.children.forEach(visit);
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Might need to update scripts when i find errors, but so far is good enough.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>One Math Book For Every Math Subject</title>
        <published>2024-01-14T00:11:50+00:00</published>
        <updated>2024-01-14T00:11:50+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://1221141.github.io/blog/20240114001150-one-math-book-for-every-math-subject/"/>
        <id>https://1221141.github.io/blog/20240114001150-one-math-book-for-every-math-subject/</id>
        
        <content type="html" xml:base="https://1221141.github.io/blog/20240114001150-one-math-book-for-every-math-subject/">&lt;p&gt;https:&#x2F;&#x2F;youtube.com&#x2F;watch?v=-mfaMbraEkU&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Testing cronjob</title>
        <published>2024-01-13T23:17:52+00:00</published>
        <updated>2024-01-13T23:17:52+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://1221141.github.io/blog/20240113231752-testing-cronjob/"/>
        <id>https://1221141.github.io/blog/20240113231752-testing-cronjob/</id>
        
        <content type="html" xml:base="https://1221141.github.io/blog/20240113231752-testing-cronjob/">&lt;p&gt;Testing the cronjob that saves posts as json. the content is in html&lt;br &#x2F;&gt;
testing again.... again. Ok, cronjob is working. Now I need to fix the parsing.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Can&#x27;t find a good blog solution</title>
        <published>2024-01-13T14:24:47+00:00</published>
        <updated>2024-01-13T14:24:47+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://1221141.github.io/blog/20240113142447-cant-find-a-good-blog-solution/"/>
        <id>https://1221141.github.io/blog/20240113142447-cant-find-a-good-blog-solution/</id>
        
        <content type="html" xml:base="https://1221141.github.io/blog/20240113142447-cant-find-a-good-blog-solution/">&lt;p&gt;Now I am enjoying using WordPress. I can use on my phone and on the web. I have a selfhosted solution with minimal plugins.&lt;&#x2F;p&gt;
&lt;p&gt;\&lt;&#x2F;p&gt;
&lt;p&gt;It has most of what I expected, I can attach media and write posts. I have different types of posts. I can post from my phone using the jetpack android app, or I can use the mobile admin dashboard.&lt;&#x2F;p&gt;
&lt;p&gt;\&lt;&#x2F;p&gt;
&lt;p&gt;The problem is that the content is not in markdown. I am not sure if this is a major problem. I can backup the content as raw html, and parse in the future. But to add code snippets is a pain.&lt;&#x2F;p&gt;
&lt;p&gt;\&lt;&#x2F;p&gt;
&lt;p&gt;I need to write some tests to see how bad this is. But hopefully I can think of something better.&lt;&#x2F;p&gt;
&lt;p&gt;\&lt;&#x2F;p&gt;
&lt;p&gt; &lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Ensure Markdown is the true format of my posts</title>
        <published>2024-01-11T09:55:00+00:00</published>
        <updated>2024-01-11T09:55:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://1221141.github.io/blog/20240111095500-ensure-markdown-is-the-true-format-of-my-posts/"/>
        <id>https://1221141.github.io/blog/20240111095500-ensure-markdown-is-the-true-format-of-my-posts/</id>
        
        <content type="html" xml:base="https://1221141.github.io/blog/20240111095500-ensure-markdown-is-the-true-format-of-my-posts/">&lt;p&gt;While I am enjoying playing with WordPress I need to be careful that I always have a markdown backup in place.&lt;br &#x2F;&gt;
I created my python script to do that but the cronjob is not working... might need to write a php one and hookup in WordPress core as a plugin to always create the backup when I create&#x2F;update a post&#x2F;page.&lt;br &#x2F;&gt;
&lt;del&gt;I can use Parsedown to convert html to markdown, might investigate that.&lt;&#x2F;del&gt; Parsdown is only from md -&amp;gt; html. I found this library &lt;code&gt;league&#x2F;html-to-markdown&lt;&#x2F;code&gt; but no success in importing it and using.&lt;br &#x2F;&gt;
☝️following this, I can save the fields I want in JSON. Then I can pipeline tinot another project to transform to markdown. I found that JavaScript ecosystem seems more healthy with html&#x2F;markdown parsing tools.&lt;br &#x2F;&gt;
I will try write some js code with &lt;code&gt;rehype-remark&lt;&#x2F;code&gt;.\&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;br &#x2F;&gt;
New Plan:&lt;br &#x2F;&gt;
If i need to write code, I use the markdown editor, if not I can use the classical editor.&lt;br &#x2F;&gt;
Now I need to find a way to parse the html, but I can do that later.&lt;br &#x2F;&gt;
Sure, would be better if the editor was in markdown to begin with, but the plugins are clunky. I think it is better to stay in html. If I have time I can write my own parser. I will investigate the unify hast\&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;br &#x2F;&gt;
[2024-01-19] New solution here: &lt;a href=&quot;&#x2F;&quot;&gt;Parse&#x2F; WordPress to Markdown&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Track Series from TVDB Bookmarklet</title>
        <published>2024-01-10T22:07:56+00:00</published>
        <updated>2024-01-10T22:07:56+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://1221141.github.io/blog/20240110220756-track-series-from-tvdb-bookmarklet/"/>
        <id>https://1221141.github.io/blog/20240110220756-track-series-from-tvdb-bookmarklet/</id>
        
        <content type="html" xml:base="https://1221141.github.io/blog/20240110220756-track-series-from-tvdb-bookmarklet/">&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;javascript:(function() {
&lt;&#x2F;span&gt;&lt;span&gt;let poster = document.querySelector(&amp;quot;.ipc-image&amp;quot;).srcset.split(&amp;quot; &amp;quot;)[4];
&lt;&#x2F;span&gt;&lt;span&gt;let title = document.title;
&lt;&#x2F;span&gt;&lt;span&gt;let url = [location.protocol, &amp;quot;&#x2F;&#x2F;&amp;quot;, location.host, location.pathname].join(&amp;quot;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;let dateWatched = prompt(&amp;quot;Enter the date watched (format: YYYY-MM-DD):&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;let body = [];
&lt;&#x2F;span&gt;&lt;span&gt;body.push(`&amp;lt;img src=&amp;quot;${poster}&amp;quot; &#x2F;&amp;gt;`);
&lt;&#x2F;span&gt;&lt;span&gt;body.push(&amp;quot;&amp;lt;br&#x2F;&amp;gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;body.push(`&amp;lt;a href=&amp;quot;${url}&amp;quot;&amp;gt;${url}&amp;lt;&#x2F;a&amp;gt;`);
&lt;&#x2F;span&gt;&lt;span&gt;body.push(`&amp;lt;p&amp;gt;Date Watched: ${dateWatched}&amp;lt;&#x2F;p&amp;gt;`);
&lt;&#x2F;span&gt;&lt;span&gt;window.open(
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&#x2F;imdb.php?title=&amp;quot;&#x2F; + encodeURIComponent(title.trim()) +
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;amp;body=&amp;quot; + encodeURIComponent(body.join(&amp;quot;\n&amp;quot;).trim()) +
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;amp;tags=movie,watched,tracking&amp;amp;category=tracking&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Back to work</title>
        <published>2024-01-08T08:47:45+00:00</published>
        <updated>2024-01-08T08:47:45+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://1221141.github.io/blog/20240108084745-back-to-work/"/>
        <id>https://1221141.github.io/blog/20240108084745-back-to-work/</id>
        
        <content type="html" xml:base="https://1221141.github.io/blog/20240108084745-back-to-work/">&lt;p&gt;Seems like I wasn&#x27;t on vacation.&lt;&#x2F;p&gt;
&lt;p&gt;\&lt;&#x2F;p&gt;
&lt;p&gt;I will try my best to focus today.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Termux on android</title>
        <published>2024-01-07T21:43:14+00:00</published>
        <updated>2024-01-07T21:43:14+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://1221141.github.io/blog/20240107214314-termux-on-android/"/>
        <id>https://1221141.github.io/blog/20240107214314-termux-on-android/</id>
        
        <content type="html" xml:base="https://1221141.github.io/blog/20240107214314-termux-on-android/">&lt;p&gt;I can use Termux on android to ssh to my server.&lt;&#x2F;p&gt;
&lt;p&gt;Pretty handy&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>No point in waste time with blog theme</title>
        <published>2024-01-07T19:20:17+00:00</published>
        <updated>2024-01-07T19:20:17+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://1221141.github.io/blog/20240107192017-no-point-in-waste-time-with-blog-theme/"/>
        <id>https://1221141.github.io/blog/20240107192017-no-point-in-waste-time-with-blog-theme/</id>
        
        <content type="html" xml:base="https://1221141.github.io/blog/20240107192017-no-point-in-waste-time-with-blog-theme/">&lt;p&gt;Now that I think of, there is no need to waste time tinkering with blog themes. The whole point of try a CMS was to make it easy to write down my thoughts. I will just use the simplest theme I can find and not was time with it.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Blog is live</title>
        <published>2024-01-06T20:15:39+00:00</published>
        <updated>2024-01-06T20:15:39+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://1221141.github.io/blog/20240106201539-blog-is-live/"/>
        <id>https://1221141.github.io/blog/20240106201539-blog-is-live/</id>
        
        <content type="html" xml:base="https://1221141.github.io/blog/20240106201539-blog-is-live/">&lt;p&gt;https:&#x2F;&#x2F;1221141.github.io&#x2F;&lt;&#x2F;p&gt;
&lt;p&gt;\&lt;&#x2F;p&gt;
&lt;p&gt;For now I manually creared the blog, but soon I will automate.&lt;&#x2F;p&gt;
&lt;p&gt;\&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Programmatically creating a WordPress page</title>
        <published>2024-01-04T23:53:25+00:00</published>
        <updated>2024-01-04T23:53:25+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://1221141.github.io/blog/20240104235325-programmatically-creating-a-wordpress-page/"/>
        <id>https://1221141.github.io/blog/20240104235325-programmatically-creating-a-wordpress-page/</id>
        
        <content type="html" xml:base="https://1221141.github.io/blog/20240104235325-programmatically-creating-a-wordpress-page/">&lt;p&gt;I recently learned that WordPress provides a JSON API. This way I could consume and also post new content via API.&lt;&#x2F;p&gt;
&lt;p&gt;Might want to investigate this to help me when I want to track movies that I watched. Maybe a bookmarklet from IMDb or tmdb that would create the page for me.&lt;&#x2F;p&gt;
&lt;p&gt;Example in this video:&lt;&#x2F;p&gt;
&lt;p&gt;https:&#x2F;&#x2F;youtu.be&#x2F;_w4Ok-lI48g?si=hA9iUsj2z2oAjh6w&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I found another way to do that.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;add a php file in the wordpress root&lt;&#x2F;li&gt;
&lt;li&gt;this file is now available as wp-ip&#x2F;file.php&lt;&#x2F;li&gt;
&lt;li&gt;pass the parameters in a get request and use the &lt;code&gt;wp_insert_post&lt;&#x2F;code&gt; to create a post programatically.&lt;&#x2F;li&gt;
&lt;li&gt;might be more unsafe, but ok for a offline blog.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Using my Android microphone to write a blog post.</title>
        <published>2024-01-04T19:33:30+00:00</published>
        <updated>2024-01-04T19:33:30+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://1221141.github.io/blog/20240104193330-using-my-android-microphone-to-write-a-blog-post/"/>
        <id>https://1221141.github.io/blog/20240104193330-using-my-android-microphone-to-write-a-blog-post/</id>
        
        <content type="html" xml:base="https://1221141.github.io/blog/20240104193330-using-my-android-microphone-to-write-a-blog-post/">&lt;p&gt;Today I&#x27;m gonna eat for dinner, eggs and bacon. Well, not bacon but like Italian sausages.&lt;&#x2F;p&gt;
&lt;p&gt;\&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t wanna eat carbs tonight.&lt;&#x2F;p&gt;
&lt;p&gt;\&lt;&#x2F;p&gt;
&lt;p&gt;Maybe I will make the last of my bread dough. 🍞&lt;&#x2F;p&gt;
&lt;p&gt;\&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;\&lt;&#x2F;p&gt;
&lt;p&gt;This is just a test.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Panasonic ES-RT67-S503</title>
        <published>2024-01-04T18:58:04+00:00</published>
        <updated>2024-01-04T18:58:04+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://1221141.github.io/blog/20240104185804-panasonic-es-rt67-s503/"/>
        <id>https://1221141.github.io/blog/20240104185804-panasonic-es-rt67-s503/</id>
        
        <content type="html" xml:base="https://1221141.github.io/blog/20240104185804-panasonic-es-rt67-s503/">&lt;p&gt;&lt;img src=&quot;&#x2F;uploads&#x2F;2024&#x2F;01&#x2F;e1158d83e7bd0ca59beb31ef2004a8f4-109x300.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt; &lt;&#x2F;p&gt;
&lt;p&gt;Bought this foil razor for close shave, it is old and not as performant as the new models, but it works fine for my face.&lt;br &#x2F;&gt;
Not good for neck thought.&lt;br &#x2F;&gt;
Still getting used to.&lt;&#x2F;p&gt;
&lt;p&gt;\&lt;&#x2F;p&gt;
&lt;p&gt;Couldn&#x27;t find a lot of information but I got this comment from editor of &lt;code&gt;shavercheck.com&lt;&#x2F;code&gt; editor&lt;&#x2F;p&gt;
&lt;p&gt;\&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;uploads&#x2F;2024&#x2F;01&#x2F;62871ac39ac1ff290747602057083cfa.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Editing wordpress posts with markdown</title>
        <published>2024-01-04T18:25:00+00:00</published>
        <updated>2024-01-04T18:25:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://1221141.github.io/blog/20240104182500-editing-wordpress-posts-with-markdown/"/>
        <id>https://1221141.github.io/blog/20240104182500-editing-wordpress-posts-with-markdown/</id>
        
        <content type="html" xml:base="https://1221141.github.io/blog/20240104182500-editing-wordpress-posts-with-markdown/">&lt;p&gt;Found this amazing plugin &lt;a href=&quot;http:&#x2F;&#x2F;https:&#x2F;&#x2F;github.com&#x2F;terrylinooo&#x2F;githuber-md&quot;&gt;http:&#x2F;&#x2F;https:&#x2F;&#x2F;github.com&#x2F;terrylinooo&#x2F;githuber-md&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This allows me to edit pages in markdown. And my export plugin seems to not break the converted html from it.&lt;&#x2F;p&gt;
&lt;p&gt;Really enjoying editing in markdow from here.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;terrylinooo&#x2F;githuber-md&#x2F;master&#x2F;assets&#x2F;images&#x2F;screenshot-1.gif&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;terrylinooo&#x2F;githuber-md&#x2F;master&#x2F;assets&#x2F;images&#x2F;screenshot-1.gif&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Managed to make a markdown backup from wordpress</title>
        <published>2024-01-04T16:35:52+00:00</published>
        <updated>2024-01-04T16:35:52+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://1221141.github.io/blog/20240104163552-managed-to-make-a-markdown-backup-from-wordpress/"/>
        <id>https://1221141.github.io/blog/20240104163552-managed-to-make-a-markdown-backup-from-wordpress/</id>
        
        <content type="html" xml:base="https://1221141.github.io/blog/20240104163552-managed-to-make-a-markdown-backup-from-wordpress/">&lt;p&gt;As I wrote in a previous post, I want to use wordpress but still want to make markdown backups from my posts to make it future proof.&lt;br &#x2F;&gt;
I think I managed to get this working using python and the &lt;code&gt;wp export&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wp&lt;&#x2F;span&gt;&lt;span&gt; export&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --allow-root --with_attachments --skip_comments --path&lt;&#x2F;span&gt;&lt;span&gt;=&#x2F;var&#x2F;www&#x2F;wordpress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir -p&lt;&#x2F;span&gt;&lt;span&gt; bkp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;bin&#x2F;activate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;python3&lt;&#x2F;span&gt;&lt;span&gt; wx3.py 1221141.wordpress.*.xml&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; bkp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; bkp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cp -r&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;var&#x2F;www&#x2F;wordpress&#x2F;wp-content .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; add .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; push
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;w3x.py&lt;&#x2F;code&gt; script is an adaption of &lt;a href=&quot;http:&#x2F;&#x2F;https:&#x2F;&#x2F;gist.github.com&#x2F;ruslanosipov&#x2F;b748a138389db2cda1e8&quot;&gt;http:&#x2F;&#x2F;https:&#x2F;&#x2F;gist.github.com&#x2F;ruslanosipov&#x2F;b748a138389db2cda1e8&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
Now I need to make a static site with Hugo&#x2F;Jekyll from the raw markdown files&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Thoughts on wordpress</title>
        <published>2024-01-04T12:53:46+00:00</published>
        <updated>2024-01-04T12:53:46+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://1221141.github.io/blog/20240104125346-thoughts-on-wordpress/"/>
        <id>https://1221141.github.io/blog/20240104125346-thoughts-on-wordpress/</id>
        
        <content type="html" xml:base="https://1221141.github.io/blog/20240104125346-thoughts-on-wordpress/">&lt;p&gt;I have never worked with WordPress before, since I&#x27;ve never felt the need to write anything online and when if finally decided the whole static site generators were the new trend.&lt;br &#x2F;&gt;
I tend to really like to keep my own data, so I thought it was the best way to keep my notes and thoughts. But since now I&#x27;ve been self-hosting my own applications it felt that might be ok to at least try wordpress. So far I am liking, but I definitely need to find a way to export the posts to markdown for long time storage.&lt;br &#x2F;&gt;
I&#x27;ve been trying to use the combo {text editor, markdow, git, hugo}, and I really miss something where I can write from my phone.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-data&quot;&gt;My Data&lt;&#x2F;h2&gt;
&lt;p&gt;I want to write and not really spend time tinkering with scripts and renaming stuff. I might need to write another script to export the data from wordpress. But since I am self hosting I can say that the data &lt;strong&gt;is mine&lt;&#x2F;strong&gt; and I can do that in later time.&lt;br &#x2F;&gt;
I also want to automate some posts creations, since I also want to use this to bookmark some websites that I find interesting.&lt;br &#x2F;&gt;
Well, time to spend time learning about wordpress, but I guess this will be repetitively easy, since it has been going from a long time and there is a lot of resources online.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
